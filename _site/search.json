[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Space Exploration with Time Series",
    "section": "",
    "text": "Lab 0: Time Series\n\nWhat is a Time Series ?\n\nAny metric that is measured over regular time intervals makes a Time Series. A time series is a sequence of data points or observations collected or recorded over a period of time at specific, equally spaced intervals. Each data point in a time series is associated with a particular timestamp or time period, making it possible to analyze and study how a particular variable or phenomenon changes over time. Time series data can be found in various domains and can represent a wide range of phenomena, including financial data, economic indicators, weather measurements, stock prices, sales figures, and more.\n\nExample: Weather data, Stock prices, Industry forecasts, etc are some of the common ones.\n\nThe analysis of experimental data that have been observed at different points in time leads to new and unique problems in statistical modeling and inference.\nThe obvious correlation introduced by the sampling of adjacent points in time can severely restrict the applicability of the many conventional statistical methods traditionally dependent on the assumption that these adjacent observations are independent and identically distributed.\n\nKey characteristics of time series data include:\nTemporal Order: Time series data is ordered chronologically, with each data point representing an observation at a specific point in time. The order of data points is critical for understanding trends and patterns over time.\nEqually Spaced Intervals: In most cases, time series data is collected at regular intervals, such as hourly, daily, weekly, monthly, or yearly. However, irregularly spaced time series data can also exist.\nDependency: Time series data often exhibits temporal dependency, meaning that the value at a given time is influenced by or related to the values at previous times. This dependency can take various forms, including trends, seasonality. This serial correlation is called as autocorrelation.\nComponents: Time series data can typically be decomposed into various components, including:\nTrend: The long-term movement or direction in the data. Seasonality: Repeating patterns or cycles that occur at fixed intervals. Noise/Irregularity: Random fluctuations or variability in the data that cannot be attributed to the trend or seasonality.\nApplications: Time series data is widely used for various applications, including forecasting future values, identifying patterns and anomalies, understanding underlying trends, and making informed decisions based on historical data.\nAnalyzing time series data involves techniques like time series decomposition, smoothing, statistical modeling, and forecasting. This class will cover but not be limited to traditional time series modeling including ARIMA, SARIMA, the multivariate Time Series modeling including; ARIMAX, SARIMAX, and VAR models, Financial Time Series modeling including; ARCH, GARCH models, and E-GARCH, M-GARCH..ect, Bayesian structural time series (BSTS) models, Spectral Analysis and Deep Learning Techniques for Time Series. Researchers and analysts use software tools like Python, R, and specialized time series libraries to work with and analyze time series data effectively.\nTime series analysis is essential in fields such as finance, economics, epidemiology, environmental science, engineering, and many others, as it provides insights into how variables change over time and allows for the development of predictive models to forecast future trends and outcomes."
  },
  {
    "objectID": "dv.html",
    "href": "dv.html",
    "title": "Lab 0: Time Series Data Visualization",
    "section": "",
    "text": "Importing Libraries\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(forecast)\nlibrary(astsa) \nlibrary(xts)\nlibrary(tseries)\nlibrary(fpp2)\nlibrary(fma)\nlibrary(lubridate)\nlibrary(tidyverse)\nlibrary(TSstudio)\nlibrary(quantmod)\nlibrary(tidyquant)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(imputeTS)\nlibrary(gridExtra)\nlibrary(reticulate)\nlibrary(readxl)\n#use_python(\"/usr/local/bin/python3\", require = T)\nknitr::knit_engines$set(python = reticulate::eng_python)\n#py_install(\"tensorflow\")\n\n\nIn time series data visualization, the importance lies in presenting temporal patterns and trends in a clear and comprehensible manner. Effective visualization allows analysts and decision-makers to extract meaningful insights from the data, aiding in better understanding the dynamics of a system over time. The choice of visualization techniques is crucial, as it directly influences the interpretation of patterns within the time series.\nThe ability to discern seasonality, identify anomalies, and recognize patterns is vital for making informed predictions and strategic decisions. Furthermore, interactive features in visualizations enable users to delve deeper into the data, offering a dynamic and exploratory experience.\nUltimately, the clarity and accuracy of time series data visualization contribute significantly to enhancing decision-making processes across various domains, such as finance, healthcare, environmental monitoring and many other areas.\n\nData Visualization with Stock DataInteractive PlotBitcoin plot using plotlycandlestick plot\n\n\nThe following graph shows overall trends in Apple, Tesla and Amazon stock prices.\n\n\nCode\noptions(\"getSymbols.warning4.0\"=FALSE)\noptions(\"getSymbols.yahoo.warning\"=FALSE)\n\ntickers = c(\"AAPL\",\"TSLA\",\"AMZN\" )\nfor (i in tickers){\n  getSymbols(i,\n             from = \"2012-10-01\",\n             to = \"2024-01-01\")}\n\nx &lt;- list(\n  title = \"date\"\n)\ny &lt;- list(\n  title = \"value\"\n)\n\nstock &lt;- data.frame(AAPL$AAPL.Adjusted,\n                    TSLA$TSLA.Adjusted,\n                    AMZN$AMZN.Adjusted)\n\n\nstock &lt;- data.frame(stock,rownames(stock))\ncolnames(stock) &lt;- append(tickers,'Dates')\n\nstock$date&lt;-as.Date(stock$Dates,\"%Y-%m-%d\")\nhead(stock)\n\n\n               AAPL     TSLA    AMZN      Dates       date\n2012-10-01 20.04826 1.944000 12.6005 2012-10-01 2012-10-01\n2012-10-02 20.10664 1.986667 12.5300 2012-10-02 2012-10-02\n2012-10-03 20.41495 1.953333 12.7960 2012-10-03 2012-10-03\n2012-10-04 20.27356 1.960000 13.0235 2012-10-04 2012-10-04\n2012-10-05 19.84152 1.926000 12.9255 2012-10-05 2012-10-05\n2012-10-08 19.40308 1.950000 12.9530 2012-10-08 2012-10-08\n\n\nCode\n################################################\n\nggplot(stock, aes(x=date)) +\n  geom_line(aes(y=AAPL, colour=\"AAPL\"))+\n  geom_line(aes(y=AMZN, colour=\"AMZN\"))+\n  geom_line(aes(y=TSLA, colour=\"TSLA\"))+\n   labs(\n    title = \"Stock Prices for the Tech Companies\",\n    subtitle = \"From 2013-2022\",\n    x = \"Date\",\n    y = \"Adjusted Closing Prices\")+\n    theme(panel.background = element_rect(fill = \"white\", colour = \"grey50\"))+\n    guides(colour=guide_legend(title=\"Tech Companies\")) \n\n\n\n\n\n\n\nHover over the plot to see the difference.\n\n#| code-fold: true\n#| warning: false\n\n\ng4&lt;- ggplot(stock, aes(x=date)) +\n  geom_line(aes(y=AAPL, colour=\"AAPL\"))+\n  geom_line(aes(y=AMZN, colour=\"AMZN\"))+\n  geom_line(aes(y=TSLA, colour=\"TSLA\"))+\n   labs(\n    title = \"Stock Prices for the Tech Companies\",\n    subtitle = \"From 2013-2022\",\n    x = \"Date\",\n    y = \"Adjusted Closing Prices\")+\n    guides(colour=guide_legend(title=\"Tech Companies\")) \n\n\nggplotly(g4) %&gt;%\n  layout(hovermode = \"x\")\n\n\n\n\n\n\n\nOR you can obtain a single stock price\n\n\nCode\n#bitc_ALL &lt;- getSymbols(\"BTC\",auto.assign = FALSE, from = \"2020-10-01\",src=\"yahoo\")\nbitc &lt;- getSymbols(\"BTC\",auto.assign = FALSE, from = \"2021-09-15\",src=\"yahoo\") \nhead(bitc)\n\n\n           BTC.Open BTC.High BTC.Low BTC.Close BTC.Volume BTC.Adjusted\n2021-09-15  99.7099  99.7099 99.6600    99.660        102     96.00362\n2021-09-16  99.5301  99.5800 99.5300    99.580        877     95.92657\n2021-09-17  99.3900  99.4650 99.3900    99.465        502     95.81578\n2021-09-20  99.4101  99.6250 99.4101    99.625        110     95.96992\n2021-09-21  99.5878  99.5900 99.5878    99.590        464     95.93620\n2021-09-22  99.5500  99.5500 99.5500    99.550        122     95.89767\n\n\nCode\nstart(bitc)\n\n\n[1] \"2021-09-15\"\n\n\nCode\nend(bitc)\n\n\n[1] \"2024-01-16\"\n\n\nCode\nbitc=data.frame(bitc)\nbitc &lt;- data.frame(bitc,rownames(bitc))\nhead(bitc)\n\n\n           BTC.Open BTC.High BTC.Low BTC.Close BTC.Volume BTC.Adjusted\n2021-09-15  99.7099  99.7099 99.6600    99.660        102     96.00362\n2021-09-16  99.5301  99.5800 99.5300    99.580        877     95.92657\n2021-09-17  99.3900  99.4650 99.3900    99.465        502     95.81578\n2021-09-20  99.4101  99.6250 99.4101    99.625        110     95.96992\n2021-09-21  99.5878  99.5900 99.5878    99.590        464     95.93620\n2021-09-22  99.5500  99.5500 99.5500    99.550        122     95.89767\n           rownames.bitc.\n2021-09-15     2021-09-15\n2021-09-16     2021-09-16\n2021-09-17     2021-09-17\n2021-09-20     2021-09-20\n2021-09-21     2021-09-21\n2021-09-22     2021-09-22\n\n\nCode\ncolnames(bitc)[7] = \"date\"\nhead(bitc)\n\n\n           BTC.Open BTC.High BTC.Low BTC.Close BTC.Volume BTC.Adjusted\n2021-09-15  99.7099  99.7099 99.6600    99.660        102     96.00362\n2021-09-16  99.5301  99.5800 99.5300    99.580        877     95.92657\n2021-09-17  99.3900  99.4650 99.3900    99.465        502     95.81578\n2021-09-20  99.4101  99.6250 99.4101    99.625        110     95.96992\n2021-09-21  99.5878  99.5900 99.5878    99.590        464     95.93620\n2021-09-22  99.5500  99.5500 99.5500    99.550        122     95.89767\n                 date\n2021-09-15 2021-09-15\n2021-09-16 2021-09-16\n2021-09-17 2021-09-17\n2021-09-20 2021-09-20\n2021-09-21 2021-09-21\n2021-09-22 2021-09-22\n\n\nCode\nbitc$date&lt;-as.Date(bitc$date,\"%Y-%m-%d\")\nstr(bitc)\n\n\n'data.frame':   587 obs. of  7 variables:\n $ BTC.Open    : num  99.7 99.5 99.4 99.4 99.6 ...\n $ BTC.High    : num  99.7 99.6 99.5 99.6 99.6 ...\n $ BTC.Low     : num  99.7 99.5 99.4 99.4 99.6 ...\n $ BTC.Close   : num  99.7 99.6 99.5 99.6 99.6 ...\n $ BTC.Volume  : num  102 877 502 110 464 ...\n $ BTC.Adjusted: num  96 95.9 95.8 96 95.9 ...\n $ date        : Date, format: \"2021-09-15\" \"2021-09-16\" ...\n\n\nCode\n## ggplot\nbitc %&gt;%\n  ggplot()+\n  geom_line(aes(y=BTC.Adjusted,x=date),color=\"blue\")\n\n\n\n\n\nCode\n## plotly\nfig &lt;- plot_ly(bitc, x = ~date, y = ~BTC.Adjusted, type = 'scatter', mode = 'lines')\n\nfig &lt;- fig %&gt;% layout(title = \"Basic line Plot\")\nfig\n\n\n\n\n\n\n\n\n\n#| code-fold: true\n#| warning: false\n\n\n#plotly\n# candlestick plot\n\n\ndf &lt;- tail(bitc, 30)\n\nfigc &lt;- df %&gt;% plot_ly(x = ~date, type=\"candlestick\",\n          open = ~BTC.Open, close = ~BTC.Close,\n          high = ~BTC.High, low = ~BTC.Low) \nfigc &lt;- figc %&gt;% layout(title = \"Basic Candlestick Chart\")\n\nfigc"
  },
  {
    "objectID": "author.html",
    "href": "author.html",
    "title": "About the Author",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "01_introduction.html",
    "href": "01_introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "02_data_sources.html",
    "href": "02_data_sources.html",
    "title": "2  Data Sources",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "03_data_visualization.html",
    "href": "03_data_visualization.html",
    "title": "3  Data Visualization",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "04_eda.html",
    "href": "04_eda.html",
    "title": "4  Exploratory Data Analysis",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "05_univariate_ts.html",
    "href": "05_univariate_ts.html",
    "title": "5  Univariate TS Models (ARIMA/SARIMA)",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "07_multivariate_ts.html",
    "href": "07_multivariate_ts.html",
    "title": "6  Multivariate TS Models (ARIMAX/SARIMAX/VAR)",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "08_financial_ts.html",
    "href": "08_financial_ts.html",
    "title": "7  Financial Time Series Models (ARCH/GARCH)",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "09_deep_learning.html",
    "href": "09_deep_learning.html",
    "title": "8  Deep Learning for TS",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "10_other.html",
    "href": "10_other.html",
    "title": "9  Other: Interrupted TS/ARFIMA/ Spectral Analysis",
    "section": "",
    "text": "Coming soon."
  },
  {
    "objectID": "11_conclusions.html",
    "href": "11_conclusions.html",
    "title": "10  Conclusions",
    "section": "",
    "text": "Coming soon."
  }
]