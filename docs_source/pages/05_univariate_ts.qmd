# Univariate TS Models (ARIMA/SARIMA)


```{python}
#| echo: false

import pandas as pd
from tabulate import tabulate
import IPython.display as d
from IPython.display import display, HTML, IFrame
from IPython.display import Markdown


```

::: {.callout-note appearance="simple"}

The code used in this section is available [here](https://github.com/vdelimad/5600_project/blob/main/notebooks/5_univariate_ts/univariate_analysis.ipynb).

::: 


<!-- ==================================================
      ARIMA
================================================== -->


## ARIMA

During the previous EDA section, the following work that supports the correct section was conducted:

- We performed an initial determination on whether the data is stationary or non-stationary (see @sec-eda-initial-dickey-fuller-test).
- Since the series were found to be non-stationary, we differenced them.
- We plotted the differenced data (see @sec-eda-detrending-and-first-differencing), including the ACFs and PACFs (see @sec-eda-detrended-and-first-differenced-acfs and @sec-eda-first-and-second-difference), and comments were provided throughout.
- Then, with the Augmented Dickey-Fuller Test, we showed that all the series were now stationary (see @sec-eda-dickey-fuller-test-on-adjusted-data).

It was also found that `log()` transformations were not useful for any of the series. With this work, we can proceed to begin our ARIMA modeling.


<!-- ----------------------------------------------
     Determining `p`,`d`, and `q`
------------------------------------------------ -->

### Determining `p`,`d`, and `q`

On the previous EDA analysis, we determined the following to be the `d` values for each series:

```{python}
#| echo: false
#| label: tbl-adjusted-dickey-fuller-test
#| tbl-cap: "Shows the orders of the `d` parameter for each series."


adjusted_dickey_fuller = pd.read_csv('../tables/eda/dickey_fuller/adjusted_dickey_fuller_table.csv')


#'test_statistic', 'p_value', 'method', 'data_series', 'alternative_hypothesis'
def clean_result_table(table):

  table.drop(columns=['test_statistic', 'p_value'], inplace=True)
  # format decimals
  #columns_to_format = ['test_statistic', 'p_value']
  #table[columns_to_format] = table[columns_to_format].applymap(lambda x: f"{x:.4f}")

  # format
  table = table.rename(columns={
      'data_series': 'Data Series',
      'stationarity_method': 'Stationarity Method',
      #'test_statistic': 'Test Statistic',
      #'p_value': 'P-Value',

      })


  # generate the Markdown table
  md_table = tabulate(table, headers='keys', tablefmt='pipe', showindex=False)


  ## bold a specific line
  #line_to_bold = 11
#
  #lines = md_table.split('\n')
  ## check if there are enough rows to bold
  #if len(lines) > line_to_bold:
  #    third_row_cells = lines[line_to_bold].split('|')[1:-1]    
  #    third_row_cells = [f"**{cell.strip()}**" for cell in third_row_cells]    
  #    lines[line_to_bold] = '|' + '|'.join(third_row_cells) + '|'
  #md_bold_third_row = '\n'.join(lines)

  # show
  return Markdown(md_table)


clean_result_table(adjusted_dickey_fuller)


```


We can also use the respective ACF and PACFs plots to determine the values of `p` and `q`:


::: {.panel-tabset}

## Seas. 1: Mars Temperature

![](../images/univariate/acf_and_pacf/acf_and_pacf_mars_weather_ground_temperature.jpeg)


## Seas. 2: Mars Pressure

![](../images/univariate/acf_and_pacf/acf_and_pacf_pressure_current_pascals.jpeg)


## Financial 1: ARKX

![](../images/univariate/acf_and_pacf/acf_and_pacf_arkx_stock_adj_close.jpeg)


## Financial 2: AVAV

![](../images/univariate/acf_and_pacf/acf_and_pacf_avav_stock_adj_close.jpeg)


## Treasury NASA Outlays

![](../images/univariate/acf_and_pacf/acf_and_pacf_treasury_nasa_outlays.jpeg)


## Google Trends

![](../images/univariate/acf_and_pacf/acf_and_pacf_google_trends_space_exploration.jpeg)


## Launches

![](../images/univariate/acf_and_pacf/acf_and_pacf_launches_per_month.jpeg)


## Satellites

![](../images/univariate/acf_and_pacf/acf_and_pacf_satellites_operational_count.jpeg)

:::



#### Mars Temperature {.unnumbered .unlisted}

- `p`: 0, 1,2
- `d`: 1
- `q`: 0, 1, 2, 3

#### Mars Pressure {.unnumbered .unlisted}

- `p`: 0, 1,2,3
- `d`: 1, 2
- `q`: 0, 1,2,3,4,5

#### ARKX {.unnumbered .unlisted}

- `p`: 0
- `d`: 1
- `q`: 0

Perhaps a random walk model.

#### AVAV {.unnumbered .unlisted}

- `p`: 0
- `d`: 1
- `q`: 0

Perhaps a random walk model.


#### Treasury NASA Outlays {.unnumbered .unlisted}

- `p`: 0, 1, 2, 3
- `d`: 1
- `q`: 0, 1, 2, 3, 4

#### Google Trends {.unnumbered .unlisted}

- `p`: 0, 1, 2
- `d`: 1
- `q`: 0, 1, 2

#### Launches {.unnumbered .unlisted}

- `p`: 0, 1,2,3,4,5
- `d`: 1
- `q`: 0, 1

#### Satellites {.unnumbered .unlisted}

- `p`: 0, 1
- `d`: 1, 2
- `q`: 0, 1






<!-- ----------------------------------------------
     ARIMA Fitting
------------------------------------------------ -->

### ARIMA fitting


```{python}
#| echo: false

def clean_result_table_arima_loop(table):

  #table.drop(columns=['test_statistic', 'p_value'], inplace=True)
  # format decimals
  #columns_to_format = ['test_statistic', 'p_value']
  #table[columns_to_format] = table[columns_to_format].applymap(lambda x: f"{x:.4f}")

  # format
  #table = table.rename(columns={
  #    'data_series': 'Data Series',
  #    'stationarity_method': 'Stationarity Method',
  #    #'test_statistic': 'Test Statistic',
  #    #'p_value': 'P-Value',
#
  #    })
#
#
  # generate the Markdown table
  md_table = tabulate(table, headers='keys', tablefmt='pipe', showindex=False)


  # show
  return Markdown(md_table)


```

::: {.panel-tabset}

## Seas. 1: Mars Temperature


```{python}
#| echo: false
#| label: tbl-arima-mars-ground-temperature
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_mars_weather_ground_temperature.csv'))


```


## Seas. 2: Mars Pressure


```{python}
#| echo: false
#| label: tbl-arima-pressure-current-pascals
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_pressure_current_pascals.csv'))


```

## Financial 1: ARKX


```{python}
#| echo: false
#| label: tbl-arima-arkx-stock-adj-close
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_arkx_stock_adj_close.csv'))


```

## Financial 2: AVAV


```{python}
#| echo: false
#| label: tbl-arima-avav-stock-adj-close
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_avav_stock_adj_close.csv'))


```

## Treasury NASA Outlays


```{python}
#| echo: false
#| label: tbl-arima-treasury-nasa-outlays
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_treasury_nasa_outlays.csv'))


```

## Google Trends


```{python}
#| echo: false
#| label: tbl-arima-google-trends-space-exploration
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_google_trends_space_exploration.csv'))


```

## Launches


```{python}
#| echo: false
#| label: tbl-arima-launches-per-month
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_launches_per_month.csv'))


```

## Satellites


```{python}
#| echo: false
#| label: tbl-arima-satellites-operational-count
#| tbl-cap: "Shows the result of the ARIMA loop."


clean_result_table_arima_loop(pd.read_csv('../tables/univariate/arima_loop/arima_loop_satellites_operational_count.csv'))


```

:::


#### Best Model


```{python}
#| echo: false

def clean_result_table_bestmodel(table):

  #table.drop(columns=['test_statistic', 'p_value'], inplace=True)
  # format decimals
  #columns_to_format = ['test_statistic', 'p_value']
  #table[columns_to_format] = table[columns_to_format].applymap(lambda x: f"{x:.4f}")

  # format
  #table = table.rename(columns={
  #    'data_series': 'Data Series',
  #    'stationarity_method': 'Stationarity Method',
  #    #'test_statistic': 'Test Statistic',
  #    #'p_value': 'P-Value',
#
  #    })
#
#
  # generate the Markdown table
  md_table = tabulate(table, headers='keys', tablefmt='pipe', showindex=False)


  # show
  return Markdown(md_table)


```

::: {.panel-tabset}

## Seas. 1: Mars Temperature


```{python}
#| echo: false
#| label: tbl-bestmodels-mars-ground-temperature
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_mars_weather_ground_temperature.csv'))


```


## Seas. 2: Mars Pressure


```{python}
#| echo: false
#| label: tbl-bestmodels-pressure-current-pascals
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_pressure_current_pascals.csv'))


```

## Financial 1: ARKX


```{python}
#| echo: false
#| label: tbl-bestmodels-arkx-stock-adj-close
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_arkx_stock_adj_close.csv'))


```

## Financial 2: AVAV


```{python}
#| echo: false
#| label: tbl-bestmodels-avav-stock-adj-close
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_avav_stock_adj_close.csv'))


```

## Treasury NASA Outlays


```{python}
#| echo: false
#| label: tbl-bestmodels-treasury-nasa-outlays
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_treasury_nasa_outlays.csv'))


```

## Google Trends


```{python}
#| echo: false
#| label: tbl-bestmodels-google-trends-space-exploration
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_google_trends_space_exploration.csv'))


```

## Launches


```{python}
#| echo: false
#| label: tbl-bestmodels-launches-per-month
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_launches_per_month.csv'))


```

## Satellites


```{python}
#| echo: false
#| label: tbl-bestmodels-satellites-operational-count
#| tbl-cap: "Shows the best model of the ARIMA loop."


clean_result_table_bestmodel(pd.read_csv('../tables/univariate/best_models/best_models_satellites_operational_count.csv'))


```

:::





#### Model Diagnostics



::: {.panel-tabset}

## Seas. 1: Mars Temperature

![](../images/univariate/diagnostics/diagnostics_plot_mars_weather_ground_temperature.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_mars_weather_ground_temperature.txt', 'r') as file:
        print(file.read())
```


## Seas. 2: Mars Pressure

![](../images/univariate/diagnostics/diagnostics_plot_pressure_current_pascals.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_pressure_current_pascals.txt', 'r') as file:
        print(file.read())
```



## Financial 1: ARKX

![](../images/univariate/diagnostics/diagnostics_plot_arkx_stock_adj_close.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_arkx_stock_adj_close.txt', 'r') as file:
        print(file.read())
```



## Financial 2: AVAV

![](../images/univariate/diagnostics/diagnostics_plot_avav_stock_adj_close.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_avav_stock_adj_close.txt', 'r') as file:
        print(file.read())
```



## Treasury NASA Outlays

![](../images/univariate/diagnostics/diagnostics_plot_treasury_nasa_outlays.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_treasury_nasa_outlays.txt', 'r') as file:
        print(file.read())
```



## Google Trends

![](../images/univariate/diagnostics/diagnostics_plot_google_trends_space_exploration.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_google_trends_space_exploration.txt', 'r') as file:
        print(file.read())
```



## Launches

![](../images/univariate/diagnostics/diagnostics_plot_launches_per_month.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_launches_per_month.txt', 'r') as file:
        print(file.read())
```



## Satellites

![](../images/univariate/diagnostics/diagnostics_plot_satellites_operational_count.jpeg)

```{python}
#| echo: false

with open('../tables/univariate/diagnostics/diagnostics_output_satellites_operational_count.txt', 'r') as file:
        print(file.read())
```


:::






#### Model Equations







<!-- ----------------------------------------------
    auto.arima()
------------------------------------------------ -->

### `auto.arima()`


::: {.panel-tabset}

## Seas. 1: Mars Temperature

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_mars_weather_ground_temperature.txt', 'r') as file:
        print(file.read())
```


## Seas. 2: Mars Pressure

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_pressure_current_pascals.txt', 'r') as file:
        print(file.read())
```



## Financial 1: ARKX

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_arkx_stock_adj_close.txt', 'r') as file:
        print(file.read())
```



## Financial 2: AVAV

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_avav_stock_adj_close.txt', 'r') as file:
        print(file.read())
```



## Treasury NASA Outlays

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_treasury_nasa_outlays.txt', 'r') as file:
        print(file.read())
```



## Google Trends

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_google_trends_space_exploration.txt', 'r') as file:
        print(file.read())
```



## Launches

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_launches_per_month.txt', 'r') as file:
        print(file.read())
```



## Satellites

```{python}
#| echo: false

with open('../tables/univariate/auto_arima/auto_arima_satellites_operational_count.txt', 'r') as file:
        print(file.read())
```


:::







**Time series**
Confirms the suspicions that we need seasonal variables and a SARIMA model is needed.






<!-- ----------------------------------------------
    Forecast
------------------------------------------------ -->

### Forecast


::: {.panel-tabset}

## Seas. 1: Mars Temperature

![](../images/univariate/forecast/forecast_mars_weather_ground_temperature.jpeg)


## Seas. 2: Mars Pressure

![](../images/univariate/forecast/forecast_pressure_current_pascals.jpeg)


## Financial 1: ARKX

![](../images/univariate/forecast/forecast_arkx_stock_adj_close.jpeg)


## Financial 2: AVAV

![](../images/univariate/forecast/forecast_avav_stock_adj_close.jpeg)


## Treasury NASA Outlays

![](../images/univariate/forecast/forecast_treasury_nasa_outlays.jpeg)


## Google Trends

![](../images/univariate/forecast/forecast_google_trends_space_exploration.jpeg)


## Launches

![](../images/univariate/forecast/forecast_launches_per_month.jpeg)


## Satellites

![](../images/univariate/forecast/forecast_satellites_operational_count.jpeg)

:::





<!-- ----------------------------------------------
    Benchmark Methods
------------------------------------------------ -->

### Benchmark Methods




```{python}
#| echo: false

def clean_result_table_benchmarkmethods(table):

  #table.drop(columns=['test_statistic', 'p_value'], inplace=True)
  # format decimals
  #columns_to_format = ['test_statistic', 'p_value']
  #table[columns_to_format] = table[columns_to_format].applymap(lambda x: f"{x:.4f}")

  # format
  #table = table.rename(columns={
  #    'data_series': 'Data Series',
  #    'stationarity_method': 'Stationarity Method',
  #    #'test_statistic': 'Test Statistic',
  #    #'p_value': 'P-Value',
#
  #    })
#
#
  # generate the Markdown table
  md_table = tabulate(table, headers='keys', tablefmt='pipe', showindex=False)


  # show
  return Markdown(md_table)


```


::: {.panel-tabset}

## Seas. 1: Mars Temperature

![](../images/univariate/benchmark_methods/benchmark_methods_mars_weather_ground_temperature.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-ground-temperature
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_mars_weather_ground_temperature.csv'))

```




## Seas. 2: Mars Pressure

![](../images/univariate/benchmark_methods/benchmark_methods_pressure_current_pascals.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-pressure-current-pascals
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_pressure_current_pascals.csv'))

```



## Financial 1: ARKX

![](../images/univariate/benchmark_methods/benchmark_methods_arkx_stock_adj_close.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-arkx-stock
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_arkx_stock_adj_close.csv'))

```



## Financial 2: AVAV

![](../images/univariate/benchmark_methods/benchmark_methods_avav_stock_adj_close.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-avav-stock
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_avav_stock_adj_close.csv'))

```



## Treasury NASA Outlays

![](../images/univariate/benchmark_methods/benchmark_methods_treasury_nasa_outlays.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-treasury-nasa-outlays
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_treasury_nasa_outlays.csv'))

```



## Google Trends

![](../images/univariate/benchmark_methods/benchmark_methods_google_trends_space_exploration.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-google-trends
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_google_trends_space_exploration.csv'))

```



## Launches

![](../images/univariate/benchmark_methods/benchmark_methods_launches_per_month.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-launches-per-month
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_launches_per_month.csv'))

```



## Satellites

![](../images/univariate/benchmark_methods/benchmark_methods_satellites_operational_count.jpeg)

```{python}
#| echo: false
#| label: tbl-benchmarkmethods-satellites-operational-count
#| tbl-cap: "Shows the accuracy metrics of the benchmark methods."

clean_result_table_benchmarkmethods(pd.read_csv('../tables/univariate/benchmark_methods/benchmark_methods_satellites_operational_count.csv'))

```



:::










<!-- ----------------------------------------------------------------------------------------------------------------------------------------- -->




<!-- ==================================================
      SARIMA
================================================== -->

## SARIMA

_SARIMA models have been moved to Homework 4._





